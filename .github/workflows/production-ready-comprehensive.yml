name: Production-Ready Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: '0'

jobs:
  setup-and-install:
    name: Setup and Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=deps-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            backend/node_modules
            ~/.cache/ms-playwright
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

  backend-comprehensive-tests:
    name: Backend Comprehensive Testing
    runs-on: ubuntu-latest
    needs: setup-and-install
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: telehealth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
          key: ${{ needs.setup-and-install.outputs.cache-key }}

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
        run: |
          psql $DATABASE_URL -f database/unified-portal-schema.sql

      - name: Run unit tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
          JWT_SECRET: test-jwt-secret-minimum-32-characters-long
          HIPAA_AUDIT_SALT: $2a$10$TestSaltForHIPAAAuditLogging
        run: npm test

      - name: Run security validation tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
          JWT_SECRET: test-jwt-secret-minimum-32-characters-long
          HIPAA_AUDIT_SALT: $2a$10$TestSaltForHIPAAAuditLogging
        run: npm run test:security

      - name: Run performance tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
          JWT_SECRET: test-jwt-secret-minimum-32-characters-long
        run: npm run test:performance

      - name: Generate backend test coverage
        working-directory: ./backend
        run: npm run test:coverage

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend
          flags: backend

  frontend-build-and-tests:
    name: Frontend Build and Testing
    runs-on: ubuntu-latest
    needs: setup-and-install
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
          key: ${{ needs.setup-and-install.outputs.cache-key }}

      - name: Type check frontend
        working-directory: ./frontend
        run: npm run type-check

      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 1

  comprehensive-e2e-testing:
    name: Comprehensive E2E Testing - Every Button and Function
    runs-on: ubuntu-latest
    needs: [setup-and-install, backend-comprehensive-tests, frontend-build-and-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: telehealth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            backend/node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup-and-install.outputs.cache-key }}

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
        run: |
          psql $DATABASE_URL -f database/unified-portal-schema.sql
          psql $DATABASE_URL -f database/dev-setup.sql

      - name: Start backend server
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
          JWT_SECRET: test-jwt-secret-minimum-32-characters-long
          HIPAA_AUDIT_SALT: $2a$10$TestSaltForHIPAAAuditLogging
          PORT: 3001
        run: |
          npm start &
          echo $! > backend.pid

      - name: Start frontend server
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          PORT: 3000
        run: |
          npm run dev &
          echo $! > frontend.pid

      - name: Wait for servers to be ready
        run: |
          npx wait-on http://localhost:3001/health --timeout 60000
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run comprehensive E2E tests - Patient Portal
        run: npx playwright test tests/e2e/patient-complete-journey.spec.ts --project=${{ matrix.project }}

      - name: Run comprehensive E2E tests - Provider Portal
        run: npx playwright test tests/e2e/provider-portal-complete.spec.ts --project=${{ matrix.project }}

      - name: Run visual regression tests
        run: npx playwright test tests/e2e/visual-regression.spec.ts --project=${{ matrix.project }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}
          path: playwright-report/
          retention-days: 7

      - name: Stop servers
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
          if [ -f frontend/frontend.pid ]; then kill $(cat frontend/frontend.pid) || true; fi

  mobile-responsive-testing:
    name: Mobile Responsive Testing
    runs-on: ubuntu-latest
    needs: [setup-and-install, backend-comprehensive-tests, frontend-build-and-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: telehealth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        device: ['iPhone 12', 'Pixel 5', 'iPad']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            backend/node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup-and-install.outputs.cache-key }}

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
        run: |
          psql $DATABASE_URL -f database/unified-portal-schema.sql
          psql $DATABASE_URL -f database/dev-setup.sql

      - name: Start services
        run: |
          cd backend && npm start &
          cd frontend && npm run dev &
          npx wait-on http://localhost:3001/health --timeout 60000
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run mobile tests
        run: npx playwright test tests/e2e/mobile-responsive.spec.ts --project="Mobile ${{ matrix.device }}"

  accessibility-testing:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [setup-and-install, backend-comprehensive-tests, frontend-build-and-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup-and-install.outputs.cache-key }}

      - name: Start frontend for accessibility testing
        working-directory: ./frontend
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run accessibility tests
        run: npx playwright test tests/e2e/accessibility.spec.ts

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: accessibility-report/

  load-performance-testing:
    name: Load and Performance Testing
    runs-on: ubuntu-latest
    needs: [backend-comprehensive-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: telehealth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
        run: |
          cd backend && npm ci
          psql $DATABASE_URL -f database/unified-portal-schema.sql

      - name: Start backend server
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
          JWT_SECRET: test-jwt-secret-minimum-32-characters-long
          PORT: 3001
        run: |
          npm start &
          npx wait-on http://localhost:3001/health --timeout 60000

      - name: Run load tests
        run: k6 run tests/load/api-load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/

  security-penetration-testing:
    name: Security Penetration Testing
    runs-on: ubuntu-latest
    needs: [backend-comprehensive-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: telehealth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup test environment
        run: |
          cd backend && npm ci
          psql postgresql://test_user:test_password@localhost:5432/telehealth_test -f database/unified-portal-schema.sql

      - name: Start backend for security testing
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/telehealth_test
          JWT_SECRET: test-jwt-secret-minimum-32-characters-long
          PORT: 3001
        run: |
          npm start &
          npx wait-on http://localhost:3001/health --timeout 60000

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules.tsv'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: report_html.html

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [
      security-scan,
      backend-comprehensive-tests,
      frontend-build-and-tests,
      comprehensive-e2e-testing,
      mobile-responsive-testing,
      accessibility-testing,
      load-performance-testing
    ]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://telehealth-staging.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

      - name: Deploy to Staging
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID
          
      - name: Run post-deployment smoke tests
        run: |
          sleep 30
          curl -f https://telehealth-staging.vercel.app/health || exit 1
          npx playwright test tests/e2e/smoke-tests.spec.ts --config=playwright.config.staging.ts

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [
      security-scan,
      backend-comprehensive-tests,
      frontend-build-and-tests,
      comprehensive-e2e-testing,
      mobile-responsive-testing,
      accessibility-testing,
      load-performance-testing,
      security-penetration-testing
    ]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://telehealth-production.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

      - name: Deploy to Production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel --prod --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID

      - name: Run comprehensive post-deployment validation
        run: |
          sleep 60
          curl -f https://telehealth-production.vercel.app/health || exit 1
          npx playwright test tests/e2e/production-validation.spec.ts --config=playwright.config.production.ts

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "🚀 Production deployment successful! All tests passed."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  test-results-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [
      security-scan,
      backend-comprehensive-tests,
      frontend-build-and-tests,
      comprehensive-e2e-testing,
      mobile-responsive-testing,
      accessibility-testing,
      load-performance-testing
    ]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive test report
        run: |
          echo "# 🧪 COMPREHENSIVE TEST EXECUTION RESULTS" > test-summary.md
          echo "" >> test-summary.md
          echo "## 📊 Test Coverage Summary" >> test-summary.md
          echo "- ✅ Backend Unit Tests: ${{ needs.backend-comprehensive-tests.result }}" >> test-summary.md
          echo "- ✅ Frontend Build: ${{ needs.frontend-build-and-tests.result }}" >> test-summary.md
          echo "- ✅ E2E Testing (Every Button): ${{ needs.comprehensive-e2e-testing.result }}" >> test-summary.md
          echo "- ✅ Mobile Responsive: ${{ needs.mobile-responsive-testing.result }}" >> test-summary.md
          echo "- ✅ Accessibility: ${{ needs.accessibility-testing.result }}" >> test-summary.md
          echo "- ✅ Load Performance: ${{ needs.load-performance-testing.result }}" >> test-summary.md
          echo "- ✅ Security Scan: ${{ needs.security-scan.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## 🎯 Production Readiness Status" >> test-summary.md
          
          if [[ "${{ needs.comprehensive-e2e-testing.result }}" == "success" && "${{ needs.backend-comprehensive-tests.result }}" == "success" ]]; then
            echo "🟢 **READY FOR PRODUCTION** - All critical tests passed" >> test-summary.md
          else
            echo "🔴 **NOT READY** - Critical tests failed" >> test-summary.md
          fi

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-summary
          path: test-summary.md