name: Database Privilege Migration Security Validation

on:
  pull_request:
    paths:
      - 'database/migrations/**'
      - 'database/schema/**'
      - '.github/workflows/database-privilege-migration-security.yml'
  push:
    branches: [ main, staging, develop ]
    paths:
      - 'database/migrations/**'
      - 'database/schema/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test (development/staging)'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
      force_run:
        description: 'Force run even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  # Security testing configuration
  POSTGRES_VERSION: '15'
  TEST_DATABASE_NAME: 'telehealth_security_test_db'
  SECURITY_TEST_TIMEOUT: '30m'

jobs:
  detect-changes:
    name: Detect Database Changes
    runs-on: ubuntu-latest
    outputs:
      migrations-changed: ${{ steps.changes.outputs.migrations }}
      schema-changed: ${{ steps.changes.outputs.schema }}
      security-tests-changed: ${{ steps.changes.outputs.security-tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            migrations:
              - 'database/migrations/**'
            schema:
              - 'database/schema/**'
              - 'database/*.sql'
            security-tests:
              - 'database/migrations/tests/**'
              - '.github/workflows/database-privilege-migration-security.yml'

  security-validation:
    name: Database Privilege Migration Security Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.migrations-changed == 'true' || 
      needs.detect-changes.outputs.schema-changed == 'true' ||
      needs.detect-changes.outputs.security-tests-changed == 'true' ||
      github.event.inputs.force_run == 'true'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || 'development' }}
        postgres-version: ['15']
      fail-fast: false

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres_test_password
          POSTGRES_DB: ${{ env.TEST_DATABASE_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres_test_password@localhost:5432/${{ env.TEST_DATABASE_NAME }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ matrix.environment }}" >> $GITHUB_ENV

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq

      - name: Verify database connection
        run: |
          psql "$DATABASE_URL" -c "SELECT version();"

      - name: Create test database schema
        run: |
          # Create telehealth user for testing
          psql "$DATABASE_URL" -c "CREATE USER IF NOT EXISTS telehealth_user WITH PASSWORD 'secure_test_password';"
          psql "$DATABASE_URL" -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.TEST_DATABASE_NAME }} TO telehealth_user;"
          psql "$DATABASE_URL" -c "GRANT ALL ON SCHEMA public TO telehealth_user;"

      - name: Apply base migrations
        run: |
          # Apply core migrations first (excluding the vulnerable one)
          for migration in database/migrations/00{1..7}_*.sql; do
            if [ -f "$migration" ]; then
              echo "Applying base migration: $migration"
              psql "$DATABASE_URL" -f "$migration"
            fi
          done

      - name: Apply privilege migration (under test)
        run: |
          echo "Applying privilege migration under security testing..."
          psql "$DATABASE_URL" -f "database/migrations/008_database_privilege_roles.sql"

      - name: Make security test script executable
        run: |
          chmod +x database/migrations/tests/run-privilege-migration-security-tests.sh

      - name: Run privilege migration security tests
        id: security-tests
        run: |
          cd database/migrations/tests
          ./run-privilege-migration-security-tests.sh ${{ matrix.environment }}
        continue-on-error: true

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results-${{ matrix.environment }}-postgres${{ matrix.postgres-version }}
          path: |
            database/migrations/tests/results/
          retention-days: 30

      - name: Parse security test results
        id: parse-results
        if: always()
        run: |
          # Find the latest results file
          RESULTS_FILE=$(find database/migrations/tests/results/ -name "*security_test_report_*.json" -type f -exec ls -t {} + | head -1)
          
          if [ -f "$RESULTS_FILE" ]; then
            echo "results_file=$RESULTS_FILE" >> $GITHUB_OUTPUT
            
            # Extract key metrics
            CRITICAL_ISSUES=$(jq -r '.summary.critical_issues // 0' "$RESULTS_FILE")
            HIGH_ISSUES=$(jq -r '.summary.high_issues // 0' "$RESULTS_FILE")
            SECURITY_SCORE=$(jq -r '.summary.security_score // 0' "$RESULTS_FILE")
            RECOMMENDATIONS=$(jq -r '.summary.recommendations // "No recommendations available"' "$RESULTS_FILE")
            
            echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
            echo "high_issues=$HIGH_ISSUES" >> $GITHUB_OUTPUT
            echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
            echo "recommendations<<EOF" >> $GITHUB_OUTPUT
            echo "$RECOMMENDATIONS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Set deployment gate status
            if [ "$CRITICAL_ISSUES" -eq 0 ]; then
              echo "deployment_gate=APPROVED" >> $GITHUB_OUTPUT
            else
              echo "deployment_gate=BLOCKED" >> $GITHUB_OUTPUT
            fi
          else
            echo "No results file found"
            echo "deployment_gate=BLOCKED" >> $GITHUB_OUTPUT
            echo "security_score=0" >> $GITHUB_OUTPUT
          fi

      - name: Create security test summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## üõ°Ô∏è Database Privilege Migration Security Test Results
          
          **Environment:** `${{ matrix.environment }}`  
          **PostgreSQL Version:** `${{ matrix.postgres-version }}`  
          **Security Score:** `${{ steps.parse-results.outputs.security_score }}/100`  
          **Deployment Gate:** `${{ steps.parse-results.outputs.deployment_gate }}`
          
          ### Issues Detected
          - **Critical Issues:** ${{ steps.parse-results.outputs.critical_issues }}
          - **High-Risk Issues:** ${{ steps.parse-results.outputs.high_issues }}
          
          ### Recommendations
          ```
          ${{ steps.parse-results.outputs.recommendations }}
          ```
          
          ### Security Test Status
          ${{ steps.security-tests.outcome == 'success' && '‚úÖ All security tests passed' || '‚ùå Security vulnerabilities detected' }}
          EOF

      - name: Comment on PR (if applicable)
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const critical = parseInt('${{ steps.parse-results.outputs.critical_issues }}') || 0;
            const high = parseInt('${{ steps.parse-results.outputs.high_issues }}') || 0;
            const score = parseFloat('${{ steps.parse-results.outputs.security_score }}') || 0;
            const gate = '${{ steps.parse-results.outputs.deployment_gate }}';
            
            const status = critical > 0 ? 'üö® CRITICAL' : high > 0 ? '‚ö†Ô∏è HIGH RISK' : '‚úÖ SECURE';
            const emoji = gate === 'APPROVED' ? '‚úÖ' : 'üö´';
            
            const comment = `## ${emoji} Database Privilege Migration Security Report
            
            **Security Status:** ${status}  
            **Security Score:** ${score}/100  
            **Deployment Gate:** ${gate}
            
            | Metric | Count |
            |--------|-------|
            | Critical Issues | ${critical} |
            | High-Risk Issues | ${high} |
            
            ### Recommendations
            \`\`\`
            ${{ steps.parse-results.outputs.recommendations }}
            \`\`\`
            
            ${critical > 0 ? 'üö´ **DEPLOYMENT BLOCKED** - Critical security vulnerabilities must be resolved before merging.' : ''}
            ${high > 0 && critical === 0 ? '‚ö†Ô∏è **REVIEW REQUIRED** - High-risk issues detected.' : ''}
            ${critical === 0 && high === 0 ? '‚úÖ **DEPLOYMENT APPROVED** - All security tests passed.' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail job if critical security issues detected
        if: always()
        run: |
          if [ "${{ steps.parse-results.outputs.critical_issues }}" != "0" ]; then
            echo "‚ùå CRITICAL SECURITY VULNERABILITIES DETECTED"
            echo "Deployment is BLOCKED until these issues are resolved."
            exit 1
          elif [ "${{ steps.parse-results.outputs.high_issues }}" != "0" ]; then
            echo "‚ö†Ô∏è HIGH-RISK SECURITY ISSUES DETECTED"
            echo "Review and approval required before deployment."
            exit 1
          else
            echo "‚úÖ All security tests passed - deployment approved"
            exit 0
          fi

  backup-recovery-validation:
    name: Backup and Recovery Validation
    runs-on: ubuntu-latest
    needs: [detect-changes, security-validation]
    if: |
      needs.detect-changes.outputs.migrations-changed == 'true' || 
      github.event.inputs.force_run == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres_test_password
          POSTGRES_DB: telehealth_backup_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Set up backup test environment
        run: |
          echo "BACKUP_DATABASE_URL=postgresql://postgres:postgres_test_password@localhost:5433/telehealth_backup_test_db" >> $GITHUB_ENV

      - name: Run backup and recovery validation tests
        run: |
          chmod +x database/migrations/tests/run-backup-recovery-tests.sh
          database/migrations/tests/run-backup-recovery-tests.sh

      - name: Upload backup test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-recovery-test-results
          path: |
            database/migrations/tests/backup-results/
          retention-days: 7

  deployment-gate:
    name: Security Deployment Gate
    runs-on: ubuntu-latest
    needs: [security-validation, backup-recovery-validation]
    if: always()
    
    steps:
      - name: Download security test results
        uses: actions/download-artifact@v4
        with:
          pattern: security-test-results-*
          merge-multiple: true
          path: ./security-results

      - name: Evaluate deployment readiness
        id: deployment-gate
        run: |
          # Check for deployment gate files
          GATE_STATUS="UNKNOWN"
          
          for gate_file in security-results/deployment_gate_*.txt; do
            if [ -f "$gate_file" ]; then
              status=$(cat "$gate_file")
              echo "Found gate status: $status"
              
              if [ "$status" = "DEPLOYMENT_BLOCKED" ]; then
                GATE_STATUS="BLOCKED"
                break
              elif [ "$status" = "DEPLOYMENT_APPROVED" ]; then
                GATE_STATUS="APPROVED"
              fi
            fi
          done
          
          echo "deployment_status=$GATE_STATUS" >> $GITHUB_OUTPUT
          
          case $GATE_STATUS in
            "APPROVED")
              echo "‚úÖ DEPLOYMENT APPROVED - All security validations passed"
              ;;
            "BLOCKED")
              echo "üö´ DEPLOYMENT BLOCKED - Critical security issues detected"
              exit 1
              ;;
            *)
              echo "‚ùì DEPLOYMENT STATUS UNKNOWN - Manual review required"
              exit 1
              ;;
          esac

      - name: Create deployment summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## üöÄ Deployment Gate Status
          
          **Final Status:** `${{ steps.deployment-gate.outputs.deployment_status }}`
          
          ### Security Validation Results
          - Database privilege migration security tests: ${{ needs.security-validation.result }}
          - Backup and recovery validation: ${{ needs.backup-recovery-validation.result }}
          
          ### Next Steps
          ${{ steps.deployment-gate.outputs.deployment_status == 'APPROVED' && '‚úÖ Ready for deployment to next environment' || 'üö´ Resolve security issues before proceeding' }}
          EOF